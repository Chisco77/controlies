##############################################################################
# -*- coding: utf-8 -*-
# Project:      ControlIES
# Module:       Laptops.py
# Purpose:      Laptops class
# Language:     Python 2.5
# Date:         31-May-2012.
# Ver:          31-May-2012.
# Author:       Manuel Mora Gordillo
# Copyright:    2012 - Manuel Mora Gordillo <manuito @no-spam@ gmail.com>
#
# ControlIES is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# ControlIES is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with ControlIES. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from math import floor

class Laptops(object):

    def __init__(self):
        pass
    
    def __init__(self,DB,id_laptop,serial_number,id_trademark):
        self.DB = DB
        self.id_laptop = id_laptop        
        self.serial_number = serial_number
        self.id_trademark = id_trademark        
        
    def validation(self,action):

        if self.id_trademark == "none":
            return "id_trademark"

        if self.serial_number == "":
            return "serial_number"
        
        exists = self.existsSerialNumber(self.serial_number)
        
        if action=="add" and exists!=False:
            return "serial_number_exists"

        if action=="modify" and exists!=False:
            if exists!=self.id_laptop:
                return "serial_number_exists"
                
        return "OK"

    def process(self,action):
        if action == "add":
            val = self.validation(action)
            
            if val != "OK":
                return val
            else:
                response = self.add()
                return response

        if action == "modify":
            val = self.validation(action)
            
            if val != "OK":
                return val
            else:
                response = self.modify()
                return response
        
            
    def list(self,args):

        sql = "SELECT l.id_laptop, lt.trademark, lt.model, l.serial_number, lh.username, s.state"
        sql = sql+" FROM laptops l"
        sql = sql+" LEFT JOIN laptops_trademarks lt ON l.id_trademark=lt.id_trademark "
        sql = sql+" LEFT JOIN laptops_historical lh ON l.id_laptop=lh.id_laptop "        
        sql = sql+" LEFT JOIN states s ON lh.id_state=s.id_state "
        sql = sql+" WHERE 1=1 "

        if str(args['serial_number']) == "None":
            args['serial_number']=""
            
        if str(args['trademark']) == "None":
            args['trademark']=""

        if str(args['model']) == "None":
            args['model']=""

        if str(args['username']) == "None":
            args['username']=""

        if str(args['state']) == "None":
            args['state']=""

        sql = sql + " GROUP BY l.id_laptop"
        sql = sql + " ORDER BY "+args['sidx']+" "+args['sord']+", lh.datetime desc"
        
        desc=""
        if args['sord'] == "desc":
            desc="~"
        
        print args['state']
        where = ((self.DB.laptops.serial_number.like('%'+args['serial_number']+'%'))&
                 (self.DB.laptops_trademarks.trademark.like('%'+args['trademark']+'%'))&
                 (self.DB.laptops_trademarks.model.like('%'+args['model']+'%'))&
                 (self.DB.laptops_historical.username.like('%'+args['username']+'%'))&
                 (self.DB.states.state.like('%'+args['state']+'%')))

        where = ((self.DB.laptops.serial_number.like('%'+args['serial_number']+'%'))&
                  (self.DB.laptops_trademarks.trademark.like('%'+args['trademark']+'%'))&
                  (self.DB.laptops_trademarks.model.like('%'+args['model']+'%')))#&
                  #(self.DB.laptops_historical.username.like('%'+args['username']+'%')))
                  #(self.DB.states.state.like('%'+args['state']+'%')))
                         
        result = self.DB(where).select(self.DB.laptops.ALL, self.DB.laptops_trademarks.trademark, self.DB.laptops_trademarks.model, self.DB.laptops_historical.username, self.DB.states.state,
                                       left=[self.DB.laptops_trademarks.on(self.DB.laptops.id_trademark==self.DB.laptops_trademarks.id_trademark),
                                             self.DB.laptops_historical.on(self.DB.laptops.id_laptop==self.DB.laptops_historical.id_laptop),
                                             self.DB.states.on(self.DB.laptops_historical.id_state==self.DB.states.id_state)],
                                       groupby=self.DB.laptops.id_laptop,
                                       orderby=desc+self.DB.laptops.serial_number)



        rows = []
        for reg in result:
            row = {
				"id":reg["laptops"]["id_laptop"],
				"cell":[reg["laptops_trademarks"]["trademark"],reg["laptops_trademarks"]["model"],reg["laptops"]["serial_number"],reg["laptops_historical"]["username"],reg["states"]["state"]],
				"trademark":reg["laptops_trademarks"]["trademark"],
				"model":reg["laptops_trademarks"]["model"],
				"serial_number":reg["laptops"]["serial_number"],
                "username":reg["laptops_historical"]["username"],
                "state":reg["states"]["state"]
            }
            rows.append(row)

        # grid parameters
        limit = int(args['rows'])
        page = int(args['page'])
        start = limit * page - limit
        finish = start + limit;             
                    
        # grid parameters
        if len(rows) > 0:
            totalPages = floor( len(rows) / int(limit) )
            module = len(rows) % int(limit)

            if module > 0:
				totalPages = totalPages+1
        else:
            totalPages = 0

        if page > totalPages:
            page = totalPages

        return { "page":page, "total":totalPages, "records":len(rows), "rows":rows[start:finish] }


    def add(self):
<<<<<<< .mine
        self.DB.laptops.insert(serial_number=self.serial_number,id_trademark=self.id_trademark)        
=======
        self.DB.laptops.insert(serial_number=self.serial_number,id_trademark=self.id_trademark)
>>>>>>> .r380
        return "OK"
            
            
    def modify(self):
        self.DB(self.DB.laptops.id_laptop==self.id_laptop).update(serial_number=self.serial_number, id_trademark=self.id_trademark)

        return "OK"


    def delete(self):
        self.DB(self.DB.laptops.id_laptop==self.id_laptop).delete()
        return "OK"


    def existsSerialNumber(self,serial_number):
        result = self.DB(self.DB.laptops.serial_number==serial_number).select(self.DB.laptops.id_laptop)
        if len(result) > 0:
            return str(result[0]["id_laptop"])
        
        return False
        
    def getLaptopData(self):        
        where = (self.DB.laptops.id_trademark==self.DB.laptops_trademarks.id_trademark)&(self.DB.laptops.id_laptop==self.id_laptop)
        result = self.DB(where).select(self.DB.laptops.id_laptop, self.DB.laptops.serial_number, self.DB.laptops.id_trademark, self.DB.laptops_trademarks.trademark, self.DB.laptops_trademarks.model)
        
        dataLaptop = {
            "id_laptop":str(result[0]["laptops"]["id_laptop"]),
            "serial_number":result[0]["laptops"]["serial_number"],
            "id_trademark":str(result[0]["laptops"]["id_trademark"]),
            "trademark":str(result[0]["laptops_trademarks"]["trademark"]+"/"+result[0]["laptops_trademarks"]["model"])
        }
        return dataLaptop

    def getAllLaptopTypes(self):
        result = self.DB().select(self.DB.laptops_trademarks.ALL, orderby=self.DB.laptops_trademarks.trademark)
        
        data=[]
        for r in result:
            dataType = {
                "id_trademark":r["id_trademark"],
                "trademark":r["trademark"]+" / "+r["model"]
            }
            data.append(dataType)
        return data

    def getMaxId(self):
        result = self.DB().select(self.DB.laptops_trademarks.id_laptop.max()).first()
        
        #print result
        """sql="SELECT max(id_laptop) AS max FROM laptops"
        result = self.DB.executesql(sql)"""

        return str(result[0]["id_laptop"])

    def getIdbySerialNumber (self, serial_number):    
        sql="SELECT id_laptop FROM laptops WHERE serial_number = '" + serial_number + "'"
        result = self.DB.executesql(sql)

        return str(result[0][0])
    
    def getIdbySerialNumber (self, serial_number):
        sql="SELECT id_laptop FROM laptops WHERE serial_number = '" + serial_number + "'"
        result = self.DB.executesql(sql)
        
        return str(result[0][0])
        